{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : insets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      presentation = _ref2.presentation,\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n          height = _ref3.height;\n\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n            headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n\n        return false;\n      });\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n            detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : options.cardStyleInterpolator === forModalPresentationIOS ? i !== scenes.map(function (scene) {\n          return scene.descriptor.options.cardStyleInterpolator;\n        }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n            cardStyleInterpolator = _scene$descriptor$opt2.cardStyleInterpolator,\n            _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n            headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n            headerTransparent = _scene$descriptor$opt2.headerTransparent,\n            headerStyle = _scene$descriptor$opt2.headerStyle,\n            headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n\n        var _ref6 = StyleSheet.flatten(headerStyle) || {},\n            headerBackgroundColor = _ref6.backgroundColor;\n\n        var headerDarkContent;\n\n        if (headerShown) {\n          if (headerTintColor) {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else if (typeof headerBackgroundColor === 'string') {\n            headerDarkContent = !Color(headerBackgroundColor).isDark();\n          }\n        }\n\n        var interpolationIndex = 0;\n\n        for (var _i = index - 1; _i >= 0; _i--) {\n          var _scenes$i;\n\n          var cardStyleInterpolatorCurrent = (_scenes$i = scenes[_i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n          if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n            break;\n          }\n\n          interpolationIndex++;\n        }\n\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref7 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref7.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var _descriptor$options$h;\n\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n          var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n          var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n              animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n              _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n              gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n              _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n              gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n              _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n              transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n              _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n              cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n              _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n              headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n              _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n              cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || cardStyleInterpolator === forModalPresentationIOS : _optionsForTransition7;\n          var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || cardStyleInterpolator === forModalPresentationIOS) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n          var scene = {\n            route: route,\n            descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n              options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n                animationEnabled: animationEnabled,\n                cardOverlayEnabled: cardOverlayEnabled,\n                cardStyleInterpolator: cardStyleInterpolator,\n                gestureDirection: gestureDirection,\n                gestureEnabled: gestureEnabled,\n                headerStyleInterpolator: headerStyleInterpolator,\n                transitionSpec: transitionSpec,\n                headerMode: headerMode\n              })\n            }),\n            progress: {\n              current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n              next: nextGesture && nextDescriptor.options.presentation !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","headerStatusBarHeight","isParentHeaderShown","insets","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","presentation","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","getDerivedStateFromProps","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","Platform","gestureEnabled","transitionSpec","cardStyleInterpolator","headerStyleInterpolator","cardOverlayEnabled","forModalPresentationIOS","headerMode","scene","progress","current","next","undefined","__memo","headerHeights","constructor","SafeAreaProviderCompat","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","headerShown","headerTransparent","activeScreensLimit","i","detachPreviousScreen","floatingHeader","renderHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","Color","interpolationIndex","cardStyleInterpolatorCurrent","isNextScreenTransparent","detachCurrentScreen","closingRouteKeys","container","flex","absolute","position","left","right","floating","zIndex"],"mappings":"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","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const { headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top } =\n      options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        let defaultTransitionPreset =\n          optionsForTransitionConfig.presentation === 'modal'\n            ? ModalTransition\n            : optionsForTransitionConfig.presentation === 'transparentModal'\n            ? ModalFadeTransition\n            : DefaultTransition;\n\n        const {\n          animationEnabled = Platform.OS !== 'web' &&\n            Platform.OS !== 'windows' &&\n            Platform.OS !== 'macos',\n          gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n          gestureDirection = defaultTransitionPreset.gestureDirection,\n          transitionSpec = defaultTransitionPreset.transitionSpec,\n          cardStyleInterpolator = animationEnabled === false\n            ? forNoAnimationCard\n            : defaultTransitionPreset.cardStyleInterpolator,\n          headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            cardStyleInterpolator === forModalPresentationIOS,\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            cardStyleInterpolator === forModalPresentationIOS\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animationEnabled,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : options.cardStyleInterpolator === forModalPresentationIOS\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              cardStyleInterpolator,\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (headerTintColor) {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            let interpolationIndex = 0;\n\n            for (let i = index - 1; i >= 0; i--) {\n              const cardStyleInterpolatorCurrent =\n                scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n              if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n                break;\n              }\n\n              interpolationIndex++;\n            }\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
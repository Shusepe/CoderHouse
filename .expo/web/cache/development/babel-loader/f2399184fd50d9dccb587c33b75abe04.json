{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jose\\\\CoderHouse\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport ListScreen from \"./screens/list.screen\";\nimport AddScreen from \"./screens/add.screen\";\n\nvar fetchFonts = function fetchFonts() {\n  return _regeneratorRuntime.async(function fetchFonts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            \"KronaOne-Regular\": require(\"./assets/fonts/KronaOne-Regular.ttf\")\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAddScreen = _useState4[0],\n      setIsAddScreen = _useState4[1];\n\n  var _useFonts = useFonts({\n    \"KronaOne-Regular\": require(\"./assets/fonts/KronaOne-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 2),\n      loaded = _useFonts2[0],\n      error = _useFonts2[1];\n\n  if (!fontsLoaded) return React.createElement(AppLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 28\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, isAddScreen ? React.createElement(AddScreen, {\n    items: items,\n    setItems: setItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }) : React.createElement(ListScreen, {\n    items: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      return setIsAddScreen(!isAddScreen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, isAddScreen ? style = styles.title(\"Ver Modo Lista\") : style = styles.title(\"Agregar Item\")));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  title: {\n    fontSize: 20,\n    fontFamily: \"KronaOne-Regular\"\n  }\n});\nexport default App;","map":{"version":3,"sources":["C:/Users/Jose/CoderHouse/App.js"],"names":["StatusBar","React","useState","Button","TextInput","Font","AppLoading","ListScreen","AddScreen","fetchFonts","loadAsync","require","App","items","setItems","isAddScreen","setIsAddScreen","useFonts","loaded","error","fontsLoaded","styles","container","style","title","StyleSheet","create","flex","fontSize","fontFamily"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,oBAAlC;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,OAAOC,UAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACXJ,IAAI,CAACK,SAAL,CAAe;AACnB,gCAAoBC,OAAO;AADR,WAAf,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAMA,SAASC,GAAT,GAAe;AACb,kBAA0BV,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAsCZ,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOa,WAAP;AAAA,MAAoBC,cAApB;;AAEA,kBAAwBC,QAAQ,CAAC;AAC/B,wBAAoBN,OAAO;AADI,GAAD,CAAhC;AAAA;AAAA,MAAOO,MAAP;AAAA,MAAeC,KAAf;;AAIA,MAAI,CAACC,WAAL,EAAkB,OAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAElB,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,WAAW,GACV,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEF,KAAlB;AAAyB,IAAA,QAAQ,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GAGV,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAED,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAOE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,WAAb;AAAyB,IAAA,OAAO,EAAE;AAAA,aAAMG,cAAc,CAAC,CAACD,WAAF,CAApB;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,WAAW,GACPQ,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAa,gBAAb,CADD,GAEPD,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAa,cAAb,CAHf,CAPF,CADF;AAeD;;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BH,EAAAA,KAAK,EAAE;AACLI,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE;AAFP;AAJwB,CAAlB,CAAf;AAUA,eAAejB,GAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, View, Platform } from \"react-native\";\r\nimport { Button, TextInput } from \"react-native-paper\";\r\n\r\nimport * as Font from \"expo-font\";\r\nimport { AppLoading } from \"expo\";\r\n\r\nimport ListScreen from \"./screens/list.screen\";\r\nimport AddScreen from \"./screens/add.screen\";\r\n\r\nconst fetchFonts = async () => {\r\n  await Font.loadAsync({\r\n    \"KronaOne-Regular\": require(\"./assets/fonts/KronaOne-Regular.ttf\"),\r\n  });\r\n};\r\n\r\nfunction App() {\r\n  const [items, setItems] = useState([]);\r\n  const [isAddScreen, setIsAddScreen] = useState(true);\r\n\r\n  const [loaded, error] = useFonts({\r\n    \"KronaOne-Regular\": require(\"./assets/fonts/KronaOne-Regular.ttf\"),\r\n  });\r\n\r\n  if (!fontsLoaded) return <AppLoading />;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {isAddScreen ? (\r\n        <AddScreen items={items} setItems={setItems} />\r\n      ) : (\r\n        <ListScreen items={items} />\r\n      )}\r\n\r\n      <Button mode=\"contained\" onPress={() => setIsAddScreen(!isAddScreen)}>\r\n        {isAddScreen\r\n          ? (style = styles.title(\"Ver Modo Lista\"))\r\n          : (style = styles.title(\"Agregar Item\"))}\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontFamily: \"KronaOne-Regular\",\r\n  },\r\n});\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
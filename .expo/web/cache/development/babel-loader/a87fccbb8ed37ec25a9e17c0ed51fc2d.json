{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Jose\\\\CoderHouse\\\\screens\\\\map.screen.js\";\n\nimport React, { useState, useCallback, useLayoutEffect } from \"react\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport HeaderButton from \"../components/HeaderButton\";\n\nvar MapScreen = function MapScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLocation = _useState2[0],\n      setSelectedLocation = _useState2[1];\n\n  var region = {\n    latitude: 37.78,\n    longitude: -122.43,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  };\n  var savePickedLocationHandler = useCallback(function () {\n    if (!selectedLocation) return;\n    navigation.navigate(\"Nuevo\", {\n      picked: selectedLocation\n    });\n  }, [selectedLocation]);\n\n  var selectLocationHandler = function selectLocationHandler(event) {\n    setSelectedLocation({\n      lat: event.nativeEvent.coordinate.latitude,\n      lng: event.nativeEvent.coordinate.longitude\n    });\n  };\n\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return React.createElement(HeaderButtons, {\n          HeaderButtonComponent: HeaderButton,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 9\n          }\n        }, React.createElement(Item, {\n          title: \"Guardar\",\n          iconName: \"save-outline\",\n          onPress: savePickedLocationHandler,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }\n        }));\n      }\n    });\n  }, [navigation]);\n  var markerCoordinates;\n\n  if (selectedLocation) {\n    markerCoordinates = {\n      latitude: selectedLocation.lat,\n      longitude: selectedLocation.lng\n    };\n  }\n\n  return React.createElement(MapView, {\n    region: region,\n    style: styles.map,\n    onPress: selectLocationHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, markerCoordinates && React.createElement(Marker, {\n    title: \"Selecci\\xF3n\",\n    coordinate: markerCoordinates,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1\n  }\n});\nexport default MapScreen;","map":{"version":3,"sources":["C:/Users/Jose/CoderHouse/screens/map.screen.js"],"names":["React","useState","useCallback","useLayoutEffect","HeaderButtons","Item","MapView","Marker","HeaderButton","MapScreen","navigation","selectedLocation","setSelectedLocation","region","latitude","longitude","latitudeDelta","longitudeDelta","savePickedLocationHandler","navigate","picked","selectLocationHandler","event","lat","nativeEvent","coordinate","lng","setOptions","headerRight","markerCoordinates","styles","map","StyleSheet","create","flex"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,iCAApC;;AAEA,OAAOC,OAAP,IAAkBC,MAAlB,QAAgC,mBAAhC;AAEA,OAAOC,YAAP;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACpC,kBAAgDT,QAAQ,EAAxD;AAAA;AAAA,MAAOU,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,MAAMC,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAE,KADG;AAEbC,IAAAA,SAAS,EAAE,CAAC,MAFC;AAGbC,IAAAA,aAAa,EAAE,MAHF;AAIbC,IAAAA,cAAc,EAAE;AAJH,GAAf;AAOA,MAAMC,yBAAyB,GAAGhB,WAAW,CAAC,YAAM;AAClD,QAAI,CAACS,gBAAL,EAAuB;AAEvBD,IAAAA,UAAU,CAACS,QAAX,CAAoB,OAApB,EAA6B;AAAEC,MAAAA,MAAM,EAAET;AAAV,KAA7B;AACD,GAJ4C,EAI1C,CAACA,gBAAD,CAJ0C,CAA7C;;AAMA,MAAMU,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAW;AACvCV,IAAAA,mBAAmB,CAAC;AAClBW,MAAAA,GAAG,EAAED,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6BX,QADhB;AAElBY,MAAAA,GAAG,EAAEJ,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6BV;AAFhB,KAAD,CAAnB;AAID,GALD;;AAOAZ,EAAAA,eAAe,CAAC,YAAM;AACpBO,IAAAA,UAAU,CAACiB,UAAX,CAAsB;AACpBC,MAAAA,WAAW,EAAE;AAAA,eACX,oBAAC,aAAD;AAAe,UAAA,qBAAqB,EAAEpB,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAC,SADR;AAEE,UAAA,QAAQ,EAAC,cAFX;AAGE,UAAA,OAAO,EAAEU,yBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADW;AAAA;AADO,KAAtB;AAWD,GAZc,EAYZ,CAACR,UAAD,CAZY,CAAf;AAcA,MAAImB,iBAAJ;;AACA,MAAIlB,gBAAJ,EAAsB;AACpBkB,IAAAA,iBAAiB,GAAG;AAClBf,MAAAA,QAAQ,EAAEH,gBAAgB,CAACY,GADT;AAElBR,MAAAA,SAAS,EAAEJ,gBAAgB,CAACe;AAFV,KAApB;AAID;;AAED,SACE,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAEb,MAAjB;AAAyB,IAAA,KAAK,EAAEiB,MAAM,CAACC,GAAvC;AAA4C,IAAA,OAAO,EAAEV,qBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,iBAAiB,IAChB,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA0B,IAAA,UAAU,EAAEA,iBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF;AAOD,CAnDD;;AAqDA,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,GAAG,EAAE;AACHG,IAAAA,IAAI,EAAE;AADH;AAD0B,CAAlB,CAAf;AAMA,eAAezB,SAAf","sourcesContent":["import React, { useState, useCallback, useLayoutEffect } from \"react\";\r\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport MapView, { Marker } from \"react-native-maps\";\r\n\r\nimport HeaderButton from \"../components/HeaderButton\";\r\n\r\nconst MapScreen = ({ navigation }) => {\r\n  const [selectedLocation, setSelectedLocation] = useState();\r\n  const region = {\r\n    latitude: 37.78,\r\n    longitude: -122.43,\r\n    latitudeDelta: 0.0922,\r\n    longitudeDelta: 0.0421,\r\n  };\r\n\r\n  const savePickedLocationHandler = useCallback(() => {\r\n    if (!selectedLocation) return;\r\n\r\n    navigation.navigate(\"Nuevo\", { picked: selectedLocation });\r\n  }, [selectedLocation]);\r\n\r\n  const selectLocationHandler = (event) => {\r\n    setSelectedLocation({\r\n      lat: event.nativeEvent.coordinate.latitude,\r\n      lng: event.nativeEvent.coordinate.longitude,\r\n    });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    navigation.setOptions({\r\n      headerRight: () => (\r\n        <HeaderButtons HeaderButtonComponent={HeaderButton}>\r\n          <Item\r\n            title=\"Guardar\"\r\n            iconName=\"save-outline\"\r\n            onPress={savePickedLocationHandler}\r\n          />\r\n        </HeaderButtons>\r\n      ),\r\n    });\r\n  }, [navigation]);\r\n\r\n  let markerCoordinates;\r\n  if (selectedLocation) {\r\n    markerCoordinates = {\r\n      latitude: selectedLocation.lat,\r\n      longitude: selectedLocation.lng,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <MapView region={region} style={styles.map} onPress={selectLocationHandler}>\r\n      {markerCoordinates && (\r\n        <Marker title=\"SelecciÃ³n\" coordinate={markerCoordinates} />\r\n      )}\r\n    </MapView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  map: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default MapScreen;\r\n"]},"metadata":{},"sourceType":"module"}
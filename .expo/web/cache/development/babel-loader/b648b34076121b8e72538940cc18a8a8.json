{"ast":null,"code":"import * as SQLite from \"expo-sqlite\";\nvar db = SQLite.openDatabase(\"address.db\");\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"CREATE TABLE IF NOT EXISTS address (\\n          id INTEGER PRIMARY KEY NOT NULL,\\n          title TEXT NOT NULL,\\n          address TEXT NOT NULL\\n        )\", [], function () {\n        resolve();\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertAddress = function insertAddress(title, address) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO address (title, address) VALUES (?, ?)\", [title, address], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchAddress = function fetchAddress() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM address;\", [], function (_, result) {\n        return resolve(result);\n      }, function (_, err) {\n        return reject(err);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["C:/Users/Jose/CoderHouse/db/index.js"],"names":["SQLite","db","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","err","insertAddress","title","address","result","fetchAddress"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,IAAMC,EAAE,GAAGD,MAAM,CAACE,YAAP,CAAoB,YAApB,CAAX;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,iKAME,EANF,EAOE,YAAM;AACJJ,QAAAA,OAAO;AACR,OATH,EAUE,UAACK,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OAZH;AAcD,KAfD;AAgBD,GAjBe,CAAhB;AAmBA,SAAOR,OAAP;AACD,CArBM;AAuBP,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAC/C,MAAMX,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,uDAEE,CAACI,KAAD,EAAQC,OAAR,CAFF,EAGE,UAACJ,CAAD,EAAIK,MAAJ;AAAA,eAAeV,OAAO,CAACU,MAAD,CAAtB;AAAA,OAHF,EAIE,UAACL,CAAD,EAAIC,GAAJ;AAAA,eAAYL,MAAM,CAACK,GAAD,CAAlB;AAAA,OAJF;AAMD,KAPD;AAQD,GATe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAeP,OAAO,IAAMa,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,MAAMb,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CACE,wBADF,EAEE,EAFF,EAGE,UAACC,CAAD,EAAIK,MAAJ;AAAA,eAAeV,OAAO,CAACU,MAAD,CAAtB;AAAA,OAHF,EAIE,UAACL,CAAD,EAAIC,GAAJ;AAAA,eAAYL,MAAM,CAACK,GAAD,CAAlB;AAAA,OAJF;AAMD,KAPD;AAQD,GATe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM","sourcesContent":["import * as SQLite from \"expo-sqlite\";\r\n\r\nconst db = SQLite.openDatabase(\"address.db\");\r\n\r\nexport const init = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `CREATE TABLE IF NOT EXISTS address (\r\n          id INTEGER PRIMARY KEY NOT NULL,\r\n          title TEXT NOT NULL,\r\n          address TEXT NOT NULL\r\n        )`,\r\n        [],\r\n        () => {\r\n          resolve();\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nexport const insertAddress = (title, address) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `INSERT INTO address (title, address) VALUES (?, ?)`,\r\n        [title, address],\r\n        (_, result) => resolve(result),\r\n        (_, err) => reject(err)\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nexport const fetchAddress = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        \"SELECT * FROM address;\",\r\n        [],\r\n        (_, result) => resolve(result),\r\n        (_, err) => reject(err)\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}